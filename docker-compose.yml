
version: '3'
services:
  app:
    image: '<>'
    networks:
      - proxy    
    volumes:
      - 'evoke_data:/opt/evoke/repository'
    environment:
      - "db_server=<IP>"
      - "db_port=3306"
      - "db_database=<DB>"
      - "db_user=<USER>"
      - "db_password=<DB_PW>"
      - "airing_autoimport_enable=false"
      - "MEGA_PWD=<PASSWORD>"
      - "MEGA_EMAIL=<ACCOUNT>"
    healthcheck:
      test: curl --fail -s http://localhost:8080/login || exit 1 
      interval: "60s"
      timeout: "5s"
      retries: 5        
    deploy:
      mode: global
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure      
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.evoke.rule=Host(`<URL>`)"
        - "traefik.http.routers.evoke.entrypoints=web"
        - "traefik.http.services.evoke.loadbalancer.server.port=8080" # it seems you always need to give traefik a port so it 'notices' the service
        - "traefik.http.routers.evoke-secured.rule=Host(`<URL>`)"
        - "traefik.http.routers.evoke-secured.entrypoints=websecure"
        - "traefik.http.routers.evoke-secured.tls.certresolver=letsencryptresolver"
        - "traefik.docker.network=proxy"
          #        - "traefik.http.services.evoke.loadbalancer.sticky=true"
          #        - "traefik.http.services.evoke.loadbalancer.sticky.cookie.name=StickyCookie"
        - "traefik.http.services.evoke.loadbalancer.sticky.cookie.secure=true"
        - "traefik.http.services.evoke.loadbalancer.sticky.cookie=true"

volumes:
  evoke_data: 

networks:
  proxy:
    external: true